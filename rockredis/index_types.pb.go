// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: index_types.proto

/*
	Package rockredis is a generated protocol buffer package.

	It is generated from these files:
		index_types.proto

	It has these top-level messages:
		HsetIndexInfo
		HsetIndexList
*/
package rockredis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IndexPropertyDType int32

const (
	Int64V  IndexPropertyDType = 0
	Int32V  IndexPropertyDType = 1
	StringV IndexPropertyDType = 2
)

var IndexPropertyDType_name = map[int32]string{
	0: "Int64V",
	1: "Int32V",
	2: "StringV",
}
var IndexPropertyDType_value = map[string]int32{
	"Int64V":  0,
	"Int32V":  1,
	"StringV": 2,
}

func (x IndexPropertyDType) String() string {
	return proto.EnumName(IndexPropertyDType_name, int32(x))
}
func (IndexPropertyDType) EnumDescriptor() ([]byte, []int) { return fileDescriptorIndexTypes, []int{0} }

type IndexState int32

const (
	InitIndex      IndexState = 0
	BuildingIndex  IndexState = 1
	BuildDoneIndex IndexState = 2
	ReadyIndex     IndexState = 3
	DeletedIndex   IndexState = 4
)

var IndexState_name = map[int32]string{
	0: "InitIndex",
	1: "BuildingIndex",
	2: "BuildDoneIndex",
	3: "ReadyIndex",
	4: "DeletedIndex",
}
var IndexState_value = map[string]int32{
	"InitIndex":      0,
	"BuildingIndex":  1,
	"BuildDoneIndex": 2,
	"ReadyIndex":     3,
	"DeletedIndex":   4,
}

func (x IndexState) String() string {
	return proto.EnumName(IndexState_name, int32(x))
}
func (IndexState) EnumDescriptor() ([]byte, []int) { return fileDescriptorIndexTypes, []int{1} }

type HsetIndexInfo struct {
	Name       []byte             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IndexField []byte             `protobuf:"bytes,2,opt,name=index_field,json=indexField,proto3" json:"index_field,omitempty"`
	PrefixLen  int32              `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Unique     int32              `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	ValueType  IndexPropertyDType `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3,enum=rockredis.IndexPropertyDType" json:"value_type,omitempty"`
	State      IndexState         `protobuf:"varint,6,opt,name=state,proto3,enum=rockredis.IndexState" json:"state,omitempty"`
}

func (m *HsetIndexInfo) Reset()                    { *m = HsetIndexInfo{} }
func (m *HsetIndexInfo) String() string            { return proto.CompactTextString(m) }
func (*HsetIndexInfo) ProtoMessage()               {}
func (*HsetIndexInfo) Descriptor() ([]byte, []int) { return fileDescriptorIndexTypes, []int{0} }

type HsetIndexList struct {
	HsetIndexes []HsetIndexInfo `protobuf:"bytes,1,rep,name=hset_indexes,json=hsetIndexes" json:"hset_indexes"`
}

func (m *HsetIndexList) Reset()                    { *m = HsetIndexList{} }
func (m *HsetIndexList) String() string            { return proto.CompactTextString(m) }
func (*HsetIndexList) ProtoMessage()               {}
func (*HsetIndexList) Descriptor() ([]byte, []int) { return fileDescriptorIndexTypes, []int{1} }

func init() {
	proto.RegisterType((*HsetIndexInfo)(nil), "rockredis.HsetIndexInfo")
	proto.RegisterType((*HsetIndexList)(nil), "rockredis.HsetIndexList")
	proto.RegisterEnum("rockredis.IndexPropertyDType", IndexPropertyDType_name, IndexPropertyDType_value)
	proto.RegisterEnum("rockredis.IndexState", IndexState_name, IndexState_value)
}
func (m *HsetIndexInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HsetIndexInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.IndexField) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(len(m.IndexField)))
		i += copy(dAtA[i:], m.IndexField)
	}
	if m.PrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(m.PrefixLen))
	}
	if m.Unique != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(m.Unique))
	}
	if m.ValueType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(m.ValueType))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndexTypes(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *HsetIndexList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HsetIndexList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HsetIndexes) > 0 {
		for _, msg := range m.HsetIndexes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIndexTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIndexTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HsetIndexInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndexTypes(uint64(l))
	}
	l = len(m.IndexField)
	if l > 0 {
		n += 1 + l + sovIndexTypes(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovIndexTypes(uint64(m.PrefixLen))
	}
	if m.Unique != 0 {
		n += 1 + sovIndexTypes(uint64(m.Unique))
	}
	if m.ValueType != 0 {
		n += 1 + sovIndexTypes(uint64(m.ValueType))
	}
	if m.State != 0 {
		n += 1 + sovIndexTypes(uint64(m.State))
	}
	return n
}

func (m *HsetIndexList) Size() (n int) {
	var l int
	_ = l
	if len(m.HsetIndexes) > 0 {
		for _, e := range m.HsetIndexes {
			l = e.Size()
			n += 1 + l + sovIndexTypes(uint64(l))
		}
	}
	return n
}

func sovIndexTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndexTypes(x uint64) (n int) {
	return sovIndexTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HsetIndexInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HsetIndexInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HsetIndexInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexField", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexField = append(m.IndexField[:0], dAtA[iNdEx:postIndex]...)
			if m.IndexField == nil {
				m.IndexField = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			m.Unique = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unique |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= (IndexPropertyDType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (IndexState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HsetIndexList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HsetIndexList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HsetIndexList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HsetIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HsetIndexes = append(m.HsetIndexes, HsetIndexInfo{})
			if err := m.HsetIndexes[len(m.HsetIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndexTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndexTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndexTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndexTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("index_types.proto", fileDescriptorIndexTypes) }

var fileDescriptorIndexTypes = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xfd, 0x27, 0x3d, 0x69, 0x4b, 0xf6, 0xa0, 0x32, 0x08, 0x9b, 0x0d, 0x7b, 0x15,
	0x56, 0xa8, 0xd0, 0x15, 0x41, 0xf0, 0xc6, 0x52, 0xc4, 0xc0, 0x5e, 0x48, 0x56, 0x7a, 0x5b, 0xa2,
	0x39, 0xcd, 0x0e, 0xc6, 0x99, 0x98, 0x99, 0xc8, 0xe6, 0x4d, 0x7c, 0xa4, 0x5e, 0xee, 0x13, 0x88,
	0x5b, 0xc1, 0xe7, 0x90, 0xcc, 0xac, 0x5a, 0xf5, 0xee, 0x3b, 0xbf, 0x73, 0xbe, 0xc3, 0x77, 0x66,
	0xe0, 0x48, 0xc8, 0x9c, 0xae, 0x37, 0xa6, 0xad, 0x48, 0xcf, 0xab, 0x5a, 0x19, 0x85, 0xe3, 0x5a,
	0xbd, 0xff, 0x50, 0x53, 0x2e, 0xf4, 0xa3, 0xfb, 0x85, 0x2a, 0x94, 0xa5, 0x4f, 0x3a, 0xe5, 0x06,
	0x4e, 0x7f, 0x30, 0x98, 0xbe, 0xd6, 0x64, 0x92, 0xce, 0x9a, 0xc8, 0xad, 0x42, 0x84, 0x81, 0xcc,
	0x3e, 0x12, 0x67, 0x11, 0x8b, 0x27, 0xa9, 0xd5, 0x78, 0x02, 0xbe, 0xdb, 0xbd, 0x15, 0x54, 0xe6,
	0xbc, 0x67, 0x5b, 0x60, 0xd1, 0xab, 0x8e, 0xe0, 0x31, 0x40, 0x55, 0xd3, 0x56, 0x5c, 0x6f, 0x4a,
	0x92, 0xbc, 0x1f, 0xb1, 0x78, 0x98, 0x8e, 0x1d, 0xb9, 0x20, 0x89, 0x0f, 0x61, 0xd4, 0x48, 0xf1,
	0xa9, 0x21, 0x3e, 0xb0, 0xad, 0xbb, 0x0a, 0x5f, 0x00, 0x7c, 0xce, 0xca, 0x86, 0x6c, 0x66, 0x3e,
	0x8c, 0x58, 0x3c, 0x5b, 0x1c, 0xcf, 0x7f, 0x67, 0x9e, 0xdb, 0x54, 0x6f, 0x6a, 0x55, 0x51, 0x6d,
	0xda, 0xd5, 0xdb, 0xb6, 0xa2, 0x74, 0x6c, 0x0d, 0x9d, 0xc4, 0xc7, 0x30, 0xd4, 0x26, 0x33, 0xc4,
	0x47, 0xd6, 0xf8, 0xe0, 0x5f, 0xe3, 0x65, 0xd7, 0x4c, 0xdd, 0xcc, 0x69, 0x7a, 0x70, 0xe7, 0x85,
	0xd0, 0x06, 0x5f, 0xc2, 0xe4, 0x4a, 0x93, 0xd9, 0xd8, 0x2b, 0x48, 0x73, 0x16, 0xf5, 0x63, 0x7f,
	0xc1, 0x0f, 0x96, 0xfc, 0xf5, 0x2e, 0xcb, 0xc1, 0xee, 0xeb, 0x89, 0x97, 0xfa, 0x57, 0xbf, 0x20,
	0xe9, 0xb3, 0xe7, 0x80, 0xff, 0x27, 0x44, 0x80, 0x51, 0x22, 0xcd, 0xb3, 0xa7, 0xeb, 0xc0, 0xbb,
	0xd3, 0xe7, 0x8b, 0x75, 0xc0, 0xd0, 0x87, 0x7b, 0x97, 0xa6, 0x16, 0xb2, 0x58, 0x07, 0xbd, 0xb3,
	0x1c, 0xe0, 0x4f, 0x46, 0x9c, 0xc2, 0x38, 0x91, 0xc2, 0xed, 0x0d, 0x3c, 0x3c, 0x82, 0xe9, 0xb2,
	0x11, 0x65, 0x2e, 0x64, 0xe1, 0x10, 0x43, 0x84, 0x99, 0x45, 0x2b, 0x25, 0xc9, 0xb1, 0x1e, 0xce,
	0x00, 0x52, 0xca, 0xf2, 0xd6, 0xd5, 0x7d, 0x0c, 0x60, 0xb2, 0xa2, 0x92, 0x0c, 0xe5, 0x8e, 0x0c,
	0x96, 0x7c, 0x77, 0x1b, 0x7a, 0x37, 0xb7, 0xa1, 0xb7, 0xdb, 0x87, 0xec, 0x66, 0x1f, 0xb2, 0x6f,
	0xfb, 0x90, 0x7d, 0xf9, 0x1e, 0x7a, 0xef, 0x46, 0xf6, 0xfb, 0xcf, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x2d, 0x74, 0xe7, 0x34, 0x02, 0x00, 0x00,
}
